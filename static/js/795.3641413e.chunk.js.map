{"version":3,"file":"static/js/795.3641413e.chunk.js","mappings":"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","sources":["nodeComponents/triggers/serialComponent.tsx"],"sourcesContent":["import {\n  Card,\n  Col,\n  Divider,\n  Input,\n  Modal,\n  Radio,\n  Row,\n  Select,\n  Space,\n  Typography,\n} from 'antd';\nimport * as React from 'react';\nimport { useDebounce } from '../../utils/utils';\nimport { ExpandOutlined, PlusOutlined } from '@ant-design/icons';\n\ninterface Params {\n  builder: string;\n  cell?: any;\n  cellId?: string;\n}\nconst { Option } = Select;\nconst ParityData = ['none', 'even', 'mark', 'odd', 'space'];\nconst BaudRateData = ['110', '300', '600', '1200'];\nconst ParseData = ['byteLength', 'delimiter'];\nconst DataBitsData = [5, 6, 7, 8];\nconst WOnEncodData = ['ascii', 'utf8', 'utf16le', 'base64', 'binary', 'hex'];\nexport const FakeData: React.FC<Params> = (props) => {\n  const cells = props.cell?.toJSON();\n  const [path, setPath] = React.useState(cells.config?.path || '');\n  const [items, setItems] = React.useState(BaudRateData);\n  const [name, setName] = React.useState('');\n  const [baudRate, setBaudRate] = React.useState(cells.config?.baudRate || '');\n  const [parity, setParity] = React.useState(\n    cells.config?.parity || ParityData[1]\n  );\n  const [dataBits, setDataBits] = React.useState(\n    cells.config?.dataBits || DataBitsData[0]\n  );\n  const [stopBits, setStopBits] = React.useState(cells.config?.stopBits || 1);\n  const [rtscts, setRtscts] = React.useState(cells.config?.rtscts || true);\n  const [writeOnOpen, setWriteOnOpen] = React.useState(\n    cells.config?.writeOnOpen || ''\n  );\n  const [writeOnOpenEncoding, setWriteOnOpenEncoding] = React.useState(\n    cells.config?.writeOnOpenEncoding || ''\n  );\n  const [parseBy, setParse] = React.useState(\n    cells.meta?.parseBy || ParseData[0]\n  );\n  const [delimiter, setDelimiter] = React.useState(\n    cells.config?.delimiter || ''\n  );\n  const [delimiterEncoding, setDelimiterEncoding] = React.useState(\n    cells.config?.delimiterEncoding || WOnEncodData[0]\n  );\n  const [byteLength, setByteLength] = React.useState<string | number>(\n    cells.config?.byteLength || ''\n  );\n  const [encoding, setEncoding] = React.useState(\n    cells.config?.encoding || WOnEncodData[0]\n  );\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    if (props) {\n      const cells = props.cell?.toJSON();\n      setPath(cells.config?.path);\n      if (!items.includes(cells.config?.baudRate + '')) {\n        setItems([...items, cells.config?.baudRate?.toString()]);\n      }\n      setBaudRate(cells.config?.baudRate);\n      setParity(cells.config?.parity);\n      setDataBits(cells.config?.dataBits);\n      setStopBits(cells.config?.stopBits);\n      setRtscts(cells.config?.rtscts);\n      setWriteOnOpen(cells.config?.writeOnOpen);\n      setWriteOnOpenEncoding(cells.config?.writeOnOpenEncoding);\n      setParse(cells.meta?.parseBy);\n      setDelimiter(cells.config?.delimiter);\n      if (parseBy === 'delimiter') {\n        setDelimiterEncoding(cells.config?.delimiterEncoding);\n        setByteLength('');\n      } else {\n        setByteLength(cells.config?.byteLength);\n        setDelimiterEncoding('');\n      }\n      setEncoding(cells.config?.encoding);\n\n      // props.cell.prop放这里，当连续点击一个节点后又跳转到另一个节点时有百分之20的可能会导致config无法对应上\n      // props.cell?.prop('config', {\n      //     // path:cells.config?.path,\n      //     // baudRate:cells.config?.baudRate,\n      //     path,\n      //     baudRate,\n      //     parity,\n      //     dataBits,\n      //     stopBits,\n      //     rtscts,\n      //     writeOnOpen,\n      //     writeOnOpenEncoding,\n      //     parseBy,\n      //     delimiter,\n      //     delimiterEncoding,\n      //     byteLength,\n      //     encoding\n      // })\n      // console.log(props.cell.toJSON().config,'2333')\n      // console.log(path,baudRate,parity,dataBits,stopBits,rtscts,writeOnOpen,writeOnOpenEncoding,parseBy,delimiter,delimiterEncoding,byteLength,encoding)\n    }\n  }, [props.cellId]);\n\n  React.useEffect(() => {\n    props.cell?.prop('config', {\n      path,\n      baudRate,\n      parity,\n      dataBits,\n      stopBits,\n      rtscts,\n      writeOnOpen,\n      writeOnOpenEncoding,\n      parseBy,\n      delimiter,\n      delimiterEncoding,\n      byteLength,\n      encoding,\n    });\n    // },[props.cellId,count])\n  }, [\n    props.cellId,\n    path,\n    baudRate,\n    parity,\n    dataBits,\n    stopBits,\n    rtscts,\n    writeOnOpen,\n    writeOnOpenEncoding,\n    parseBy,\n    delimiter,\n    delimiterEncoding,\n    byteLength,\n    encoding,\n  ]);\n\n  const onBaudRateChange = (event: any) => {\n    setBaudRate(event);\n    setCount(count + 1);\n  };\n\n  const addItem = (e: any) => {\n    e.preventDefault();\n    setItems([...items, name]);\n    setName('');\n  };\n\n  const handleParityChange = (value: string) => {\n    setParity(value);\n    setCount(count + 1);\n  };\n  const onRtsctsChange = (e: any) => {\n    setRtscts(e.target.value);\n    setCount(count + 1);\n  };\n  const handleParseChange = (value: string) => {\n    setParse(value);\n    setCount(count + 1);\n  };\n\n  return (\n    <Space direction=\"vertical\">\n      <Divider plain>Configuration</Divider>\n      <Row>Serial Path</Row>\n      <Row>\n        <Input\n          placeholder=\"e.g./dev/ROBOT\"\n          value={path}\n          onChange={(v) => {\n            setPath(v.target.value);\n            setCount(count + 1);\n          }}\n        />\n      </Row>\n      <Row>Baud Rate</Row>\n      <Row>\n        <Select\n          style={{ width: 200 }}\n          placeholder=\"custom dropdown render\"\n          value={baudRate}\n          onChange={onBaudRateChange}\n          dropdownRender={(menu) => (\n            <>\n              {menu}\n              <Divider style={{ margin: '8px 0' }} />\n              <Space align=\"center\" style={{ padding: '0 8px 4px' }}>\n                <Input placeholder=\"Please enter item\" value={name} />\n                <Typography.Link\n                  onClick={addItem}\n                  style={{ whiteSpace: 'nowrap' }}>\n                  <PlusOutlined /> Add item\n                </Typography.Link>\n              </Space>\n            </>\n          )}>\n          {items.map((item) => (\n            <Option key={item}>{item}</Option>\n          ))}\n        </Select>\n      </Row>\n      <Row>Parity</Row>\n      <Row>\n        <Select\n          defaultValue={ParityData[1]}\n          value={parity}\n          onChange={handleParityChange}\n          style={{ width: '100%' }}>\n          {ParityData.map((type) => (\n            <Option key={type}>{type}</Option>\n          ))}\n        </Select>\n      </Row>\n      <Row>Data Bits</Row>\n      <Row>\n        <Select\n          defaultValue={DataBitsData[0]}\n          value={dataBits}\n          onChange={(v) => {\n            setDataBits(v);\n            setCount(count + 1);\n          }}\n          style={{ width: '100%' }}>\n          {DataBitsData.map((type) => (\n            <Option key={type}>{type}</Option>\n          ))}\n        </Select>\n      </Row>\n      <Row>Stop Bits</Row>\n      <Row>\n        <Select\n          defaultValue={1}\n          value={stopBits}\n          onChange={(v) => {\n            setStopBits(+v);\n            setCount(count + 1);\n          }}\n          style={{ width: '100%' }}>\n          <Option key={1}>1</Option>\n          <Option key={2}>2</Option>\n        </Select>\n      </Row>\n      <Row>RTS/CTS Handshake</Row>\n      <Row>\n        <Radio.Group onChange={onRtsctsChange} value={rtscts}>\n          <Radio value={true}>true</Radio>\n          <Radio value={false}>false</Radio>\n        </Radio.Group>\n      </Row>\n      <Row>Write After Port Opens</Row>\n      <Row>\n        <Input\n          placeholder=\"e.g.hello\\r\"\n          value={writeOnOpen}\n          onChange={(v) => {\n            setWriteOnOpen(v.target.value);\n            setCount(count + 1);\n          }}\n        />\n      </Row>\n      <Row>Write On Open Encoding</Row>\n      <Row>\n        <Select\n          defaultValue={WOnEncodData[0]}\n          value={writeOnOpenEncoding}\n          onChange={(v) => {\n            setWriteOnOpenEncoding(v);\n            setCount(count + 1);\n          }}\n          style={{ width: '100%' }}>\n          {WOnEncodData.map((type) => (\n            <Option key={type}>{type}</Option>\n          ))}\n        </Select>\n      </Row>\n      <Row>Parse Method</Row>\n      <Row>\n        <Select\n          defaultValue={'byteLength'}\n          value={parseBy}\n          onChange={handleParseChange}\n          style={{ width: '100%' }}>\n          <Option key={'byteLength'}>Byte Length</Option>\n          <Option key={'delimiter'}>Delimiter</Option>\n        </Select>\n      </Row>\n      {parseBy === 'delimiter' ? (\n        <>\n          <Row>Delimiter</Row>\n          <Row>\n            <Input\n              placeholder=\"e.g.\\r\"\n              value={delimiter}\n              onChange={(v) => {\n                setDelimiter(v.target.value);\n                setCount(count + 1);\n              }}\n            />\n          </Row>\n          <Row>Delimiter Encoding</Row>\n          <Row>\n            <Select\n              defaultValue={WOnEncodData[0]}\n              value={delimiterEncoding}\n              onChange={(v) => {\n                setDelimiterEncoding(v);\n                setCount(count + 1);\n              }}\n              style={{ width: '100%' }}>\n              {WOnEncodData.map((type) => (\n                <Option key={type}>{type}</Option>\n              ))}\n            </Select>\n          </Row>\n        </>\n      ) : (\n        <>\n          <Row>Byte Length</Row>\n          <Row>\n            <Input\n              placeholder=\"e.g.8\"\n              value={byteLength}\n              onChange={(v) => {\n                setByteLength(v.target.value);\n                setCount(count + 1);\n              }}\n            />\n          </Row>\n        </>\n      )}\n      <Row>Output Encoding</Row>\n      <Row>\n        <Select\n          defaultValue={WOnEncodData[0]}\n          value={encoding}\n          onChange={(v) => {\n            setEncoding(v);\n            setCount(count + 1);\n          }}\n          style={{ width: '100%' }}>\n          {WOnEncodData.map((type) => (\n            <Option key={type}>{type}</Option>\n          ))}\n        </Select>\n      </Row>\n    </Space>\n  );\n};\n"],"names":["Option","Select","ParityData","BaudRateData","ParseData","DataBitsData","WOnEncodData","FakeData","props","cells","cell","toJSON","React","config","path","setPath","items","setItems","name","setName","baudRate","setBaudRate","parity","setParity","dataBits","setDataBits","stopBits","setStopBits","rtscts","setRtscts","writeOnOpen","setWriteOnOpen","writeOnOpenEncoding","setWriteOnOpenEncoding","meta","parseBy","setParse","delimiter","setDelimiter","delimiterEncoding","setDelimiterEncoding","byteLength","setByteLength","encoding","setEncoding","count","setCount","includes","toString","cellId","prop","addItem","e","preventDefault","direction","plain","placeholder","value","onChange","v","target","style","width","event","dropdownRender","menu","margin","align","padding","onClick","whiteSpace","map","item","defaultValue","type"],"sourceRoot":""}