{"version":3,"file":"static/js/849.8154cc42.chunk.js","mappings":"kOAQQA,EAAWC,EAAAA,EAAAA,OACXC,EAAaC,EAAAA,EAAAA,SACfC,EAAa,CAAC,gBACPC,EAA6B,SAACC,GAAW,IAAD,MAC7CC,EAAkB,QAAb,EAAGD,EAAME,YAAI,aAAV,EAAYC,SAC1B,EAA4BC,EAAAA,SAAeN,EAAW,IAAG,eAAlDO,EAAM,KAAEC,EAAS,KACxB,EAAkCF,EAAAA,UACpB,QAAZ,EAAAH,EAAMM,cAAM,aAAZ,EAAcC,gBAAiB,IAChC,eAFMA,EAAa,KAAEC,EAAQ,KAG9B,EAAsCL,EAAAA,UACxB,QAAZ,EAAAH,EAAMM,cAAM,aAAZ,EAAcG,kBAAmB,IAClC,eAFMA,EAAe,KAAEC,EAAU,KAIlCP,EAAAA,WAAgB,WACd,GAAIJ,EAAO,CAAC,IAAD,MACHC,EAAkB,QAAb,EAAGD,EAAME,YAAI,aAAV,EAAYC,SAC1BM,EAAqB,QAAb,EAACR,EAAMM,cAAM,aAAZ,EAAcC,eACvBG,EAAuB,QAAb,EAACV,EAAMM,cAAM,aAAZ,EAAcG,gBAC3B,CACF,GAAG,CAACV,EAAMY,SACVR,EAAAA,WAAgB,WAAO,IAAD,EACV,QAAV,EAAAJ,EAAME,YAAI,OAAV,EAAYW,KAAK,SAAU,CACzBH,gBAAAA,EACAF,cAAAA,IAEFM,QAAQC,IAAIf,EAAME,KAAKC,SAASI,OAAQ,OAC1C,GAAG,CAACP,EAAMY,OAAQF,EAAiBF,IAYnC,OACE,UAAC,IAAK,CAACQ,UAAU,WAAU,WACzB,SAAC,IAAG,sBACJ,SAAC,IAAG,WACF,SAAC,IAAM,CACLC,aAAcZ,EACda,SAhBmB,SAACC,GAC1Bb,EAAUa,EACZ,EAeQC,MAAO,CAAEC,MAAO,QAAS,SACxBvB,EAAWwB,KAAI,SAACC,GAAI,OACnB,SAAC7B,EAAM,UAAa6B,GAAPA,EAAqB,SAIxC,SAAC,IAAG,8BACJ,SAAC,IAAG,WACF,SAAC,IAAK,CACJC,YAAY,iCACZL,MAAOX,EACPU,SAzBkB,SAACO,GACzBhB,EAASgB,EAAEC,OAAOP,MACpB,OA0BI,SAAC,IAAG,gCACJ,SAAC,IAAG,WACF,SAACvB,EAAQ,CACP4B,YAAY,2BACZG,YAAU,EACVR,MAAOT,EACPQ,SA/BoB,SAACO,GAC3Bd,EAAWc,EAAEC,OAAOP,MACtB,QAkCF,C","sources":["nodeComponents/output/mqttComponent.tsx"],"sourcesContent":["import { Col, Input, Row, Select, Space } from 'antd';\nimport * as React from 'react';\n\ninterface Params {\n  builder: string;\n  cell?: any;\n  cellId?: string;\n}\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst BrokerData = ['Local Broker'];\nexport const FakeData: React.FC<Params> = (props) => {\n  const cells = props.cell?.toJSON();\n  const [broker, setBroker] = React.useState(BrokerData[0]);\n  const [topicTemplate, setTopic] = React.useState(\n    cells.config?.topicTemplate || ''\n  );\n  const [messageTemplate, setMessage] = React.useState(\n    cells.config?.messageTemplate || ''\n  );\n\n  React.useEffect(() => {\n    if (props) {\n      const cells = props.cell?.toJSON();\n      setTopic(cells.config?.topicTemplate);\n      setMessage(cells.config?.messageTemplate);\n    }\n  }, [props.cellId]);\n  React.useEffect(() => {\n    props.cell?.prop('config', {\n      messageTemplate,\n      topicTemplate,\n    });\n    console.log(props.cell.toJSON().config, '2333');\n  }, [props.cellId, messageTemplate, topicTemplate]);\n\n  const handleBrokerChange = (value: string) => {\n    setBroker(value);\n  };\n  const onMqttTopicChange = (e: React.FocusEvent<HTMLInputElement>) => {\n    setTopic(e.target.value);\n  };\n  const onMqttMessageChange = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n  };\n\n  return (\n    <Space direction=\"vertical\">\n      <Row>Broker</Row>\n      <Row>\n        <Select\n          defaultValue={broker}\n          onChange={handleBrokerChange}\n          style={{ width: '100%' }}>\n          {BrokerData.map((type) => (\n            <Option key={type}>{type}</Option>\n          ))}\n        </Select>\n      </Row>\n      <Row>Topic Template</Row>\n      <Row>\n        <Input\n          placeholder=\"e.g.my-topic or {{data.topic}}\"\n          value={topicTemplate}\n          onChange={onMqttTopicChange}\n        />\n      </Row>\n      <Row>Message Template</Row>\n      <Row>\n        <TextArea\n          placeholder=\"textarea with clear icon\"\n          allowClear\n          value={messageTemplate}\n          onChange={onMqttMessageChange}\n        />\n      </Row>\n    </Space>\n  );\n};\n"],"names":["Option","Select","TextArea","Input","BrokerData","FakeData","props","cells","cell","toJSON","React","broker","setBroker","config","topicTemplate","setTopic","messageTemplate","setMessage","cellId","prop","console","log","direction","defaultValue","onChange","value","style","width","map","type","placeholder","e","target","allowClear"],"sourceRoot":""}